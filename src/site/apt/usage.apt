~~ Copyright 2012 Cenote GmbH.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

  ---
  Usage
  ---

Usage

%{toc|fromDepth=2}


* Installation


** Windows users

  Unzip the distribution archive to a directory of your choice for example:

+---
C:\App\jasperstarter
+---

  Add the directory

+---
C:\App\jasperstarter\bin
+---

  to your user or system path variable

  <<or simply use the setup.exe>>


** Linux users

  Extract the distribution archive to a directory of your choice for example:

+---
/opt/jasperstarter
+---

  Add the directory

+---
/opt/jasperstarter/bin
+---

  to your user or system path.


* Invoking JasperStarter

  If you put the bin dir on the seach path, just type

+---
jasperstarter
+---

  to invoke the program.

  If not, you can use an absolute path. On Linux:

+---
/opt/jasperstarter/bin/jasperstarter
+---

  and on Windows:

+---
C:\App\jasperstarter\bin\jasperstarter.exe
+---

  if you followed the example in the install section.

  If you have any problem with the binary or shell script or you need to specify
  some extra options to your java vm, you can invoke the program directly:

+---
$ java -jar /opt/jasperstarter/lib/jasperstarter.jarÂ´
+---

  or

+---
$ java -cp /opt/jasperstarter/lib/jasperstarter.jar de.cenote.jasperstarter.App
+---


* Concepts


** JasperReport files

  JasperReports know three types of files:

  * The report definition file <<myreport.jrxml>>

    This file is an xml file that defines the report, You can create it by hand
    but usually you will use one of the nice available GUI tools.

  * The compiled report file <<myreport.jasper>>

    This file is the result of compiling an <.jrxml> file.

  * The filled report file <<myreport.jrprint>>

    This file is the result of running a report. The data which is retrieved
    from the defined datasource is filled in the compiled report and can be
    stored in a <.jrprint> file.


** Stages of processing

  There are three stages of processing a JasperReport:

    * <<compiling>> results in a <.jasper> file

    * <<filling>> can optionally be stored in a <.jrprint> file

    * <<viewing, printing or exporting>> to one or more of the supported formats

  JasperStarter can carry out all of them in one commanding call.


* JasperStarter options

  JasperStarter has the following options:

+---
$ jasperstarter -h
usage: jasperstarter -f <fmt> [<fmt> ...] -i <file> [-o <file>] [-h]
                     [--debug] [--version] [-w] [-P <p> [<p> ...]] [-k]
                     [-t <dbtype>] [-H <dbhost>] [-u <dbuser>]
                     [-p <dbpasswd>] [-n <dbname>] [--db-sid <sid>]
                     [--db-port <port>] [--db-driver <name>]
                     [--db-url <jdbcUrl>] [--jdbc-dir <dir>]
                     [-N <printername>] [-d] [-l] [-s <reportname>]

options:
  -f <fmt> [<fmt> ...]   view, print, pdf, rtf, xls, xlsx, docx, odt, ods,
                         pptx, csv, html, xhtml, xml, jrprint
  -i <file>              input file (.jrxml|.jasper|.jrprint)
  -o <file>              directory or basename of outputfile(s)
  -h, --help             show this help message and exit
  --debug                display additional messages
  --version              display version information and exit

compile options:
  -w, --write-jasper     write .jasper file to imput dir if jrxml is
                         prcessed

fill options:
  -P <p> [<p> ...]       report parameter: name=type:value [...] | types:
                         string, int, double, date, image
  -k, --keep             don't delete the temporary .jrprint file.
                         OBSOLETE use output format jrprint

db options:
  -t <dbtype>            database type: none, mysql, postgres, oracle,
                         generic
  -H <dbhost>            database host
  -u <dbuser>            database user
  -p <dbpasswd>          database password
  -n <dbname>            database name
  --db-sid <sid>         oracle sid
  --db-port <port>       database port
  --db-driver <name>     jdbc driver class name for use with type: generic
  --db-url <jdbcUrl>     jdbc url without user, passwd with type:generic
  --jdbc-dir <dir>       directory where jdbc driver jars are located.
                         Defaults to ./jdbc

print options:
  -N <printername>       name of printer
  -d                     show print dialog when printing
  -l, --list-printers    list availible printers
  -s <reportname>        set internal report/document name when printing
+---


** Configuration file

  You can specify a configuration file which contains one option/argument per
  line. It can be provided to JasperStarter with the @ sign:

  Example file (example.config):

+---
-t
mysql
-H
localhost
-n
mydb
-u
volker
+---

  Example command with configuration file:

+---
$ jasperstarter -f view -i myreport @example.config
+---


* Processing reports

  To process a report you must provide the following options:

    * <<<-i>>> an inputfile (compiled report).

    * <<<-f>>> a space separated list of output formats.

        * <<view>> and <<print>> are mutaly exclusive thus print is ignored
          if view is given.

    * <<<-t>>> a database type if your report needs a database connection.
      Defaults to <<none>>.

        * if database type is not <<none>> you must specify the needed

          connection information.

  All other options are optional.

  For output <<<-o>>> see section "File handling".


** The minimum non database report

  The minimum options needed, to process a report with an empty datasource:

+---
$ jasperstarter -i myreport.jasper -f view -t none
+---


** The minimum database report

  The minimum options required to process a report that needs a database
  connection:

+---
$ jasperstarter -i myreport.jasper -f pdf -t mysql -H localhost -n mydb -u appuser
+---


** View, print or export previously filled reports

  You can fill a report at one time and view, print or export it at a later
  time.

  Just fill one report:

+---
$ jasperstarter -i myreport.jasper -f jrprint -t mysql -H localhost -n mydb -u appuser
+---

  View a previously filled report:

+---
$ jasperstarter -i myreport.jrprint -f view
+---


** Reports with runtime parameters

  Report parameters can consist of several types. Most types are self-explanatory.
  JasperStarter supports the following types:

   * string, int, date, double, image

  Multiple parameters con be separated by spaces. A parameter has the following
  form:

   * \<<<name>>\><<=>>\<<<type>>\><<:>>\<<<value>>\>

  Replace <<name>> with the parameter name in your report. Parameter names are
  <<case sensitive>> !

  The date is in ISO format and has the form: <<YYYY-MM-DD>>

+---
$ jasperstarter -t mysql -u myuser -f pdf -H myhost -n mydb -i report.jasper \
-o report -p secret -P CustomerNo=int:10 StartFrom=date:2012-10-01
+---


*** The image parameter

  A simple way of customizing a report is to provide a logo or background image
  as parameter. In the following example we use <background> as parameter name
  for the image:

   * Create a parameter in your report and change it's values:

      * <<Name>> = <background>

      * <<Parameter Class>> = <java.awt.image>

   * Place an image in your report and change it's properties:

      * <<Image Expression>> = <$P\{background\}>

      * <<Expression Class>> = <java.awt.image>

   * compile your report

  Now you can process your report with JasperStarter:

+---
$ jasperstarter -t mysql -u myuser -f pdf -H myhost -n mydb -i report.jasper \
-o report -p secret -P background=image:/tmp/mybackgroundimage.jpg
+---


** Quoting parameters that contain spaces

  Particularly windows users may need to work with spaces in file names.
  There are two ways you can do that. Just quote the value:

+---
c:\jasperstarter -t mysql -u myuser -f pdf -H myhost -n mydb -i report.jasper \
-o report -p secret -P background=image:"C:\Temp Files\My Image.jpg" otherValue=int:1
+---

  or quote the whole parameter:

+---
c:\jasperstarter -t mysql -u myuser -f pdf -H myhost -n mydb -i report.jasper \
-o report -p secret -P "background=image:C:\Temp Files\My Image.jpg" otherValue=int:1
+---


* Filehandling

  If the input file (option <<<-i>>> ) is not found, <.jasper> is added to the
  filename first, if the file is still not found <.jrxml> is added to the
  filename. So you can omit the file extension.

  If the <.jrxml> file is used, it will be compiled in memory and used for
  further processing except you provide option <<<-w>>> which causes the
  compiled report to be written to the <<input>> directory.

  A <.jrprint> file can be used as input but must specified with full filename.

  If the output file or directory ( option <<<-o>>> ) is omitted, parent of the
  input file is used as output directory and the basename of the input file is
  used for as output filename:

+---
(...) -f pdf odt -i myreports/report1
+---

  or

+---
(...) -f pdf odt -i myreports/report1.jasper
+---

  or

+---
(...) -f pdf odt -i myreports/report1.jrxml
+---

  results in:

+---
myreports/report1.odt
myreports/report1.pdf
+---

  If <output> is an existing directory, basename of <input> is used as filename
  in that directory:

+---
(...) -f pdf odt -i myreports/report1.jasper -o month01/
+---

  results in:

+---
month01/report1.odt
month01/report1.pdf
+---

  If <output> is NOT an existing directory, its name is used as basename for
  filenames:

+---
(...) -f pdf odt -i myreports/report1.jasper -o month01/journal.xyz
+---

  results in:

+---
month01/journal.xyz.odt
month01/journal.xyz.pdf
+---
